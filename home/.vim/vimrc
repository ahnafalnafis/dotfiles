vim9script

import autoload "utils.vim"

###############################################################################
################################### PLUGINS ###################################
###############################################################################

plug#begin("~/.cache/vim/plugged")
  Plug "morhetz/gruvbox"
  Plug "machakann/vim-highlightedyank"
  Plug "markonm/traces.vim"
  Plug "ap/vim-css-color", #{ for: [
        \ "css",
        \ "typescript",
        \ "typescriptreact"
        \ ]}

  Plug "neoclide/coc.nvim", #{ branch: "release" }
  Plug "wellle/context.vim"
  Plug "tpope/vim-fugitive"
  Plug "airblade/vim-gitgutter"
  Plug "cohama/lexima.vim"
  Plug "tpope/vim-surround"
  Plug "tpope/vim-commentary"
  Plug "junegunn/fzf"
  Plug "junegunn/fzf.vim"
  Plug "mbbill/undotree", #{ on: "UndotreeToggle" }
plug#end()

###############################################################################
################################### SETTINGS ##################################
###############################################################################

# File type detection:
filetype plugin indent on

# Syntax highlighting:
if has("syntax_on")
  syntax enable
else
  syntax on
endif

# Indentation:
set tabstop=2       # Tabs be 2 character width
set shiftwidth=0    # Follow tabstop
set smarttab        # Inserts spaces when <Tab> is pressed
set softtabstop=-1  # Follow shiftwidth
set expandtab       # Convert tabs into spaces
set autoindent
set copyindent

# Line number
set number
set relativenumber

# Spell checking
set spell
set spelllang=en_us

# Menus:
set wildmenu
set wildoptions=pum,tagfile
set pumheight=15

# Key press timeouts:
set timeout
set timeoutlen=1000
set ttimeout
set ttimeoutlen=50

# File backup:
set undofile
set noswapfile

# Searching:
set ignorecase
set smartcase
set incsearch
set hlsearch

# History:
set history=10000
set viminfo=!,'20,<50,s10,h

# Use system clipboard:
set clipboard^=unnamedplus

# Folds:
set foldenable
set foldmethod=manual

set display+=lastline
&fillchars = "vert:│,fold:˗,eob: "
set lazyredraw
set shortmess=cfilnsxIT belloff=all
set splitright splitbelow hidden
set updatetime=50 nrformats=alpha,hex,bin
set ttymouse=sgr
set textwidth=79 nowrap laststatus=2
set ruler signcolumn=yes
set autoread noautowrite

augroup fix_format_options
  autocmd!
  autocmd FileType * set formatoptions-=o
augroup END

###############################################################################
############################### GENERAL KEYMAPS ###############################
###############################################################################

# The legend key ;)
g:mapleader = ";"

# Select all
nnoremap <A-a>  msggVG

# Visual shifting:
vnoremap <  <gv
vnoremap >  >gv

# Make yanking behave like other commands.
nnoremap Y  y$

# Add new lines.
nnoremap <silent> <C-k>  <ScriptCmd>append(line('.') - 1, '')<CR>
nnoremap <silent> <C-j>  <ScriptCmd>append(line('.'), '')<CR>

# Tab navigation:
nnoremap <PageUp>    <Cmd>tabnext<CR>
nnoremap <PageDown>  <Cmd>tabprevious<CR>

# Reveal all of the buffers in tabs.
nnoremap <Leader>s   <Cmd>tab ball<CR>

# Delete buffer.
nnoremap <Leader>d   <Cmd>bdelete<CR>

# Movements:
nnoremap  0  ^
nnoremap  k  gk
nnoremap  j  gj
nnoremap gk  k
nnoremap gj  j

# Scroll:
nnoremap <C-d>  <C-d>zz
nnoremap <C-u>  <C-u>zz

# Searching
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zzzv
nnoremap # #zzzv

# Clear search
nnoremap <C-l> <Cmd>nohlsearch
      \ <bar>diffupdate
      \ <bar>Notify "Cleared!" 
      \ <CR>

# Macros:
nnoremap Q @q

# Terminal:
# nnoremap <Space>t  <ScriptCmd>utils.OpenTerminal(true)<CR>
# nnoremap <C-@>     <ScriptCmd>utils.OpenTerminal(false)<CR>

###############################################################################
#################### PLUGIN SPECIFIC SETTINGS AND KEYMAPS #####################
###############################################################################

# Color scheme:
g:gruvbox_bold = false
g:gruvbox_italic = true
g:gruvbox_contrast_dark = "hard"
g:gruvbox_contrast_light = "hard"
g:gruvbox_sign_column = "bg0"

# Background color:
&background = $BACKGROUND   # This is set in ~/.bashrc

try
  colorscheme gruvbox
catch
  colorscheme habamax
endtry

# Color scheme overrides:
highlight! link HighlightedyankRegion Visual

# Lexima:
g:lexima_no_default_rules = v:true
lexima#set_default_rules()
lexima#insmode#map_hook('before', '<CR>', '')

# Git:
g:gitgutter_sign_added = "▌"
g:gitgutter_sign_removed = "▌"
g:gitgutter_sign_modified = "▌"
g:gitgutter_sign_modified_removed = "▌"

# Context:
g:context_highlight_tag = "<hide>"
g:context_highlight_border = "LineNr"

# Commentary:
nmap <A-c> mcgcc`c
vmap <A-c> mcgc`c

# Highlighted yank:
g:highlightedyank_highlight_duration = 100

# Fuzzy finder:
var fzf_options = [ '--prompt= ', '--pointer=', '--layout=default']
var fzf_ignore_dirs = [
  'bin', 'build', '.git', '.cache', '.expo', 'assets', 'dist',
  'node_modules', 'package-lock.json', 'yarn.lock', 'pnpm-lock.yml',
  'last_session.vim',
]

$FZF_DEFAULT_COMMAND = $"ls-files -I {fzf_ignore_dirs->join(' -I ')}"
g:fzf_history_dir = $'{$HOME}/.local/share/fzf-history'
g:fzf_layout = { window: { width: 0.8, height: 0.8, yoffset: 0.5 } }
g:fzf_colors = {
  fg:      ['fg', 'Normal'],
  bg:      ['bg', 'Normal'],
  hl:      ['fg', 'Comment'],
  'fg+':   ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  'bg+':   ['bg', 'CursorLine', 'CursorColumn'],
  'hl+':   ['fg', 'Statement'],
  info:    ['fg', 'PreProc'],
  border:  ['fg', 'Ignore'],
  prompt:  ['fg', 'Conditional'],
  pointer: ['fg', 'Exception'],
  marker:  ['fg', 'Keyword'],
  spinner: ['fg', 'Label'],
  header:  ['fg', 'Comment']
}

command! -bang -nargs=? -complete=dir Files
      \ fzf#vim#files(<q-args>,
      \   fzf#vim#with_preview({ options: fzf_options }),
      \   <bang>0
      \ )
command! -nargs=0 Buffers fzf#vim#buffers(
      \ fzf#vim#with_preview({ options: fzf_options })
      \ )

nnoremap <Leader>f   <Cmd>Files<CR>
nnoremap <Leader>g   <Cmd>GitFiles<CR>
nnoremap <Leader>b   <Cmd>Buffers<CR>

# Conqueror of completion:
g:coc_snippet_next = "<C-j>"
g:coc_snippet_prev = "<C-k>"

g:coc_global_extensions =<< trim END
  coc-snippets
  coc-prettier
  coc-cmake
  coc-clangd
  coc-tsserver
  coc-tailwindcss
  coc-emmet
  coc-sh
  coc-markdownlint
  coc-json
  coc-yaml
END

command! -nargs=0 OR  
      \ g:CocActionAsync('runCommand', 'editor.action.organizeImport')

inoremap <expr> <Tab>     utils.OnTab()
inoremap <expr> <S-Tab>   utils.OnShiftTab()
inoremap <expr> <Enter>   utils.OnEnter()
inoremap <expr> <C-@>     coc#refresh()

nmap <silent> gd   <Plug>(coc-definition)
nmap <silent> gy   <Plug>(coc-type-definition)
nmap <silent> gi   <Plug>(coc-implementation)
nmap <silent> gr   <Plug>(coc-references)
nmap <silent> gn   <Plug>(coc-rename)

xmap <Leader>a   <Plug>(coc-codeaction-selected)
nmap <Leader>a   <Plug>(coc-codeaction-selected)
nmap <Leader>ac  <Plug>(coc-codeaction-cursor)
nmap <Leader>as  <Plug>(coc-codeaction-source)

nmap <Leader>cf  <Plug>(coc-fix-current)
nmap <Leader>cl  <Plug>(coc-codelens-action)

nmap <silent> <Leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <Leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <Leader>r  <Plug>(coc-codeaction-refactor-selected)

nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

nnoremap K  <ScriptCmd>utils.ShowDocumentation()<CR>
# TODO: Add more coc keymaps.
